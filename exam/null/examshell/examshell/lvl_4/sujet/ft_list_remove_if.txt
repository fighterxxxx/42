Assignment name  : ft_list_remove_if
Expected files   : ft_list_remove_if.c
Allowed functions: free
--------------------------------------------------------------------------------

Écrire une fonction ft_list_remove_if qui efface de la liste tous les élements
dont la donnée est "égale" à la donnée de référence.

Elle devra être prototypée de la façon suivante :

void ft_list_remove_if(t_list **begin_list, void *data_ref, int (*cmp)());

cmp prends deux void* et renvoie 0 lorsque les 2 paramètres sont égaux.

À la correction, vous disposez du fichier ft_list.h tel que :

$>cat ft_list.h
typedef struct      s_list
{
    struct s_list   *next;
    void            *data;
}                   t_list;
$>
e1r13p13% ls
subject.en.txt	subject.fr.txt	subject.ro.txt
e1r13p13% cd ..
e1r13p13% ls
check_mate		ft_list_remove_if	rev_wstr		sort_int_tab
ft_list_foreach						ft_split			rostring		sort_list
e1r13p13% cd ft_list_remove_if
e1r13p13% cat subject.fr.txt
Assignment name  : ft_list_remove_if
Expected files   : ft_list_remove_if.c
Allowed functions: free
--------------------------------------------------------------------------------

Écrire une fonction ft_list_remove_if qui efface de la liste tous les élements
dont la donnée est "égale" à la donnée de référence.

Elle devra être prototypée de la façon suivante :

void ft_list_remove_if(t_list **begin_list, void *data_ref, int (*cmp)());

cmp prends deux void* et renvoie 0 lorsque les 2 paramètres sont égaux.

À la correction, vous disposez du fichier ft_list.h tel que :

$>cat ft_list.h
typedef struct      s_list
{
    struct s_list   *next;
    void            *data;
}                   t_list;
$>
